diff --git a/Makefile b/Makefile
index 328f9c6..4fd93a8 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+ 	$U/_trace\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index 3564db4..3ac5fb9 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct perf; // wait_stat
 
 // bio.c
 void            binit(void);
@@ -104,6 +105,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             trace(int mask, int pid); // trace
+int             wait_stat(uint64, uint64 perf_addr); // wait_stat
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/proc.c b/kernel/proc.c
index 22e7ce4..5ab7743 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,9 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+// wait_stat
+#include  "stat.h"
+extern uint64 sys_uptime(void);
 
 struct cpu cpus[NCPU];
 
@@ -26,6 +29,35 @@ extern char trampoline[]; // trampoline.S
 // must be acquired before any p->lock.
 struct spinlock wait_lock;
 
+int update_wait_state(struct proc *p)
+{
+   int now;
+   if (p->state==SLEEPING){
+      now = sys_uptime();
+      p->stime = p->stime + (now - p->lastUpdate);
+      p->lastUpdate = now;
+      return 0;
+   }
+   else if (p->state==RUNNABLE){
+      now = sys_uptime();
+      p->retime = p->retime + (now - p->lastUpdate);
+      p->lastUpdate = now;
+      return 0;
+   }
+   else if (p->state==RUNNING){
+      now = sys_uptime();
+      p->rutime = p->rutime + (now - p->lastUpdate);
+      p->lastUpdate = now;
+      return 0;
+   }
+   else {
+      return -1;
+   }
+}
+
+
+
+
 // Allocate a page for each process's kernel stack.
 // Map it high in memory, followed by an invalid
 // guard page.
@@ -141,6 +173,9 @@ found:
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
 
+  /* wait_stat */
+  p->lastUpdate = p->ctime = sys_uptime();
+
   return p;
 }
 
@@ -164,6 +199,17 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+
+  p->trace_mask = 0; // trace
+
+  /* wait_stat */
+  p->ctime = 0;
+  p->ttime = 0;
+  p->stime = 0;
+  p->retime = 0;
+  p->rutime = 0;
+  p->average_bursttime = 0; //average of bursstimes in 100ths (so average*100)
+
 }
 
 // Create a user page table for a given process,
@@ -244,6 +290,8 @@ userinit(void)
 
   p->state = RUNNABLE;
 
+  p->trace_mask = 0; // trace
+
   release(&p->lock);
 }
 
@@ -292,6 +340,8 @@ fork(void)
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
 
+  np->trace_mask = p->trace_mask;
+
   // Cause fork to return 0 in the child.
   np->trapframe->a0 = 0;
 
@@ -368,6 +418,9 @@ exit(int status)
   
   acquire(&p->lock);
 
+  update_wait_state(p);
+  p->ttime = sys_uptime();
+
   p->xstate = status;
   p->state = ZOMBIE;
 
@@ -378,10 +431,19 @@ exit(int status)
   panic("zombie exit");
 }
 
+// wait_stat
+// extended the original wait() to include performance info
+// and added a new wait() that calls the extended wait()
+
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
 int
-wait(uint64 addr)
+wait(uint64 addr) {
+  return wait_stat(addr, 0);
+}
+
+int
+wait_stat(uint64 addr, uint64 perf_addr)
 {
   struct proc *np;
   int havekids, pid;
@@ -407,6 +469,15 @@ wait(uint64 addr)
             release(&wait_lock);
             return -1;
           }
+
+          // wait_stat
+          // printf ("\nCTIME= %d\n", np->ctime);
+          if(perf_addr != 0 && copyout(p->pagetable, perf_addr, (char *)&np->ctime, sizeof(struct perf)) < 0) {
+            release(&np->lock);
+            release(&wait_lock);
+            return -1;
+          }
+
           freeproc(np);
           release(&np->lock);
           release(&wait_lock);
@@ -451,6 +522,9 @@ scheduler(void)
         // Switch to chosen process.  It is the process's job
         // to release its lock and then reacquire it
         // before jumping back to us.
+
+        update_wait_state(p);
+
         p->state = RUNNING;
         c->proc = p;
         swtch(&c->context, &p->context);
@@ -497,6 +571,9 @@ yield(void)
 {
   struct proc *p = myproc();
   acquire(&p->lock);
+
+  update_wait_state(p);
+
   p->state = RUNNABLE;
   sched();
   release(&p->lock);
@@ -542,6 +619,9 @@ sleep(void *chan, struct spinlock *lk)
 
   // Go to sleep.
   p->chan = chan;
+
+  update_wait_state(p);
+
   p->state = SLEEPING;
 
   sched();
@@ -565,6 +645,8 @@ wakeup(void *chan)
     if(p != myproc()){
       acquire(&p->lock);
       if(p->state == SLEEPING && p->chan == chan) {
+        update_wait_state(p);
+
         p->state = RUNNABLE;
       }
       release(&p->lock);
@@ -586,6 +668,8 @@ kill(int pid)
       p->killed = 1;
       if(p->state == SLEEPING){
         // Wake process from sleep().
+        update_wait_state(p);
+
         p->state = RUNNABLE;
       }
       release(&p->lock);
@@ -654,3 +738,21 @@ procdump(void)
     printf("\n");
   }
 }
+
+
+int trace(int mask, int pid)
+{
+  struct proc *p;
+
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->pid == pid){
+      p->trace_mask = mask;
+      release(&p->lock);
+      // printf("Added trace to pid:%d mask:%d\n", pid, mask);
+      return 0;
+    }
+    release(&p->lock);
+  }
+  return -1;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index f6ca8b7..f7a66ce 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -93,6 +93,19 @@ struct proc {
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
 
+  int trace_mask;	             // mask of system calls to be traced
+
+
+  // wait_stat
+  int ctime;
+  int ttime;
+  int stime;
+  int retime;
+  int rutime;
+  int average_bursttime; //average of bursstimes in 100ths (so average*100)
+  int lastUpdate;
+
+
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
 
diff --git a/kernel/stat.h b/kernel/stat.h
index 19543af..208d9af 100644
--- a/kernel/stat.h
+++ b/kernel/stat.h
@@ -9,3 +9,14 @@ struct stat {
   short nlink; // Number of links to file
   uint64 size; // Size of file in bytes
 };
+
+/* wait_stat */
+struct perf {
+	int ctime;
+	int ttime;
+	int stime;
+	int retime;
+	int rutime;
+	int average_bursttime; //average of bursstimes in 100ths (so average*100)
+};
+
diff --git a/kernel/syscall.c b/kernel/syscall.c
index c1b3670..b43ba3a 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -102,8 +102,10 @@ extern uint64 sys_sbrk(void);
 extern uint64 sys_sleep(void);
 extern uint64 sys_unlink(void);
 extern uint64 sys_wait(void);
+extern uint64 sys_wait_stat(void); // wait_stat
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
+extern uint64 sys_trace(void); // trace
 
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -127,6 +129,35 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_wait_stat] sys_wait_stat,
+};
+
+// trace
+static char* (syscalls_names[]) = {
+[SYS_fork]    "fork",
+[SYS_exit]    "exit",
+[SYS_wait]    "wait",
+[SYS_pipe]    "pipe",
+[SYS_read]    "read",
+[SYS_kill]    "kill",
+[SYS_exec]    "exec",
+[SYS_fstat]   "fstat",
+[SYS_chdir]   "chdir",
+[SYS_dup]     "dup",
+[SYS_getpid]  "getpid",
+[SYS_sbrk]    "sbrk",
+[SYS_sleep]   "sleep",
+[SYS_uptime]  "uptime",
+[SYS_open]    "open",
+[SYS_write]   "write",
+[SYS_mknod]   "mknod",
+[SYS_unlink]  "unlink",
+[SYS_link]    "link",
+[SYS_mkdir]   "mkdir",
+[SYS_close]   "close",
+[SYS_trace]   "trace",
+[SYS_wait_stat] "wait_stat",
 };
 
 void
@@ -137,7 +168,18 @@ syscall(void)
 
   num = p->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+    // trace - added most of the code in this section
+    int ip;
+    argint(0, &ip);
     p->trapframe->a0 = syscalls[num]();
+    if ((p->trace_mask >> num) & 0x1) {
+      if (num == SYS_fork)
+        printf("%d: syscall %s -> %d\n", p->pid, syscalls_names[num], p->trapframe->a0);
+      else if (num == SYS_kill || num == SYS_sbrk)
+        printf("%d: syscall %s %d -> %d\n", p->pid, syscalls_names[num], ip,  p->trapframe->a0);
+      else
+        printf("%d: syscall %s -> %d\n", p->pid, syscalls_names[num], p->trapframe->a0);
+    }
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..996d3f2 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22  // trace
+#define SYS_wait_stat 23 // wait_stat
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..ed86627 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -38,6 +38,18 @@ sys_wait(void)
   return wait(p);
 }
 
+uint64
+sys_wait_stat(void)
+{
+  uint64 p, p1;
+  if(argaddr(0, &p) < 0)
+    return -1;
+  if(argaddr(1, &p1) < 0)
+    return -1;
+
+  return wait_stat(p, p1);
+}
+
 uint64
 sys_sbrk(void)
 {
@@ -95,3 +107,14 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_trace(void)
+{
+  int pid, mask;
+  if (argint(0, &mask) < 0)
+    return -1;
+  if (argint(1, &pid) < 0)
+    return -1;
+  return trace(mask, pid);
+}
diff --git a/user/sh.c b/user/sh.c
index 83dd513..b0705bd 100644
--- a/user/sh.c
+++ b/user/sh.c
@@ -3,6 +3,7 @@
 #include "kernel/types.h"
 #include "user/user.h"
 #include "kernel/fcntl.h"
+#include "kernel/stat.h"
 
 // Parsed command representation
 #define EXEC  1
@@ -53,6 +54,59 @@ int fork1(void);  // Fork but panics on failure.
 void panic(char*);
 struct cmd *parsecmd(char*);
 
+
+// TASK 1 support PATH
+
+int pathed_exec(char *file, char *argv[]) {
+	// do not use PATH with absolute file path 
+	if(file[0] == '/')
+		return exec(file, argv);
+	char path_buf[512];
+	path_buf[0] = '\0';
+	int path_fd = open("/path", O_RDONLY);
+	char *pos = &path_buf[0];
+	if (path_fd >= 0) {
+		for (;;) {
+			int n = read(path_fd, pos, sizeof path_buf - (pos - &path_buf[0]) - 1);
+			if (n == 0)
+				break;
+			if (n < 0) {
+				fprintf(2, "reading path failed\n");
+				close(path_fd);
+				return -1;
+			}
+			pos += n;
+			*pos = '\0';
+		}
+		close(path_fd);
+	}
+	char filename_buf[200];
+	char *path_and_file = strcpy(filename_buf, file);
+	pos = &path_buf[0];
+	for (;;) {
+		int fd =  open(path_and_file, O_RDONLY);
+		close(fd);
+		// found the executable so run it
+		if (fd > 0)
+			return exec(path_and_file, argv);
+		// else try to find in the path
+		if( *pos != '\0') {
+			char *next_pos = strchr(pos, ':');
+			if (next_pos != 0)
+				*next_pos = '\0';
+			strcpy(filename_buf, pos);
+			strcpy(filename_buf + strlen(pos), file);
+			if (next_pos != 0)
+				pos = next_pos + 1;
+			else
+				pos += strlen(pos);
+		}
+		else
+			break;
+	}
+	return -1;
+}
+
 // Execute cmd.  Never returns.
 void
 runcmd(struct cmd *cmd)
@@ -75,7 +129,7 @@ runcmd(struct cmd *cmd)
     ecmd = (struct execcmd*)cmd;
     if(ecmd->argv[0] == 0)
       exit(1);
-    exec(ecmd->argv[0], ecmd->argv);
+    pathed_exec(ecmd->argv[0], ecmd->argv);
     fprintf(2, "exec %s failed\n", ecmd->argv[0]);
     break;
 
@@ -166,7 +220,21 @@ main(void)
     }
     if(fork1() == 0)
       runcmd(parsecmd(buf));
-    wait(0);
+
+    // TASK 3 wait_stat
+    struct perf p;
+    memset(&p, 0, sizeof(p));
+    int pid = wait_stat(0, &p);
+    if(pid > -1) {
+      fprintf(1, "\nPID:%d\n", pid); 
+      fprintf(1, "creation time in ticks :%d\n", p.ctime); 
+      fprintf(1, "termination delta :%d\n", p.ttime - p.ctime); 
+      fprintf(1, "sleep time :%d\n", p.stime); 
+      fprintf(1, "runnable time :%d\n", p.retime); 
+      fprintf(1, "running time :%d\n", p.rutime);
+    }  
+    // original code:
+    // wait(0);
   }
   exit(0);
 }
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..180e0e5
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,22 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+char buf[512];
+
+
+int
+main(int argc, char *argv[])
+{
+  int mask = 0x7FFFFE; 
+  int pid = 2;
+  if(argc > 1){
+    pid = atoi(argv[1]);
+  }
+  if(argc > 2){
+    mask = atoi(argv[2]);
+  }
+
+  trace(mask, pid);
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index b71ecda..5f888b1 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,5 +1,6 @@
 struct stat;
 struct rtcdate;
+struct perf; /* wait_stat */
 
 // system calls
 int fork(void);
@@ -23,6 +24,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int mask, int pid);
+int wait_stat(int*, struct perf*); // wait_stat
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..8d21b49 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("wait_stat");
